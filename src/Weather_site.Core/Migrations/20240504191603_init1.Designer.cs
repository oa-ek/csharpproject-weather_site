// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weather_site.Core.Context;

#nullable disable

namespace Weather_site.Core.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240504191603_init1")]
    partial class init1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RootObjectWeather", b =>
                {
                    b.Property<Guid>("objectsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("weatherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("objectsId", "weatherId");

                    b.HasIndex("weatherId");

                    b.ToTable("RootObjectWeather");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Clouds", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("all")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clouds");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Coord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("lat")
                        .HasColumnType("float");

                    b.Property<double>("lon")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Coords");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Main", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("GroundLevel")
                        .HasColumnType("int");

                    b.Property<double>("feels_like")
                        .HasColumnType("float");

                    b.Property<int>("humidity")
                        .HasColumnType("int");

                    b.Property<int>("pressure")
                        .HasColumnType("int");

                    b.Property<int>("seaLevel")
                        .HasColumnType("int");

                    b.Property<double>("temp")
                        .HasColumnType("float");

                    b.Property<double>("temp_max")
                        .HasColumnType("float");

                    b.Property<double>("temp_min")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Mains");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.ResultViewModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Humidity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TempFeelsLike")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TempMax")
                        .HasColumnType("float");

                    b.Property<double>("TempMin")
                        .HasColumnType("float");

                    b.Property<string>("WeatherIcon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ResultViewModels");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.RootObject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("allId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("base")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("cod")
                        .HasColumnType("int");

                    b.Property<Guid>("coordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("dt")
                        .HasColumnType("int");

                    b.Property<Guid>("mainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("sysId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("timezone")
                        .HasColumnType("int");

                    b.Property<int>("visibility")
                        .HasColumnType("int");

                    b.Property<Guid>("windId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("allId");

                    b.HasIndex("coordId");

                    b.HasIndex("mainId");

                    b.HasIndex("sysId");

                    b.HasIndex("windId");

                    b.ToTable("RootObject");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Sys", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("sunrise")
                        .HasColumnType("int");

                    b.Property<int>("sunset")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Sys");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Weather", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("main")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Weathers");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Wind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Gust")
                        .HasColumnType("float");

                    b.Property<int>("deg")
                        .HasColumnType("int");

                    b.Property<double>("speed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Winds");
                });

            modelBuilder.Entity("RootObjectWeather", b =>
                {
                    b.HasOne("Weather_site.Core.Entities.RootObject", null)
                        .WithMany()
                        .HasForeignKey("objectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather_site.Core.Entities.Weather", null)
                        .WithMany()
                        .HasForeignKey("weatherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Weather_site.Core.Entities.RootObject", b =>
                {
                    b.HasOne("Weather_site.Core.Entities.Clouds", "all")
                        .WithMany("objects")
                        .HasForeignKey("allId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather_site.Core.Entities.Coord", "coord")
                        .WithMany("objects")
                        .HasForeignKey("coordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather_site.Core.Entities.Main", "main")
                        .WithMany("objects")
                        .HasForeignKey("mainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather_site.Core.Entities.Sys", "sys")
                        .WithMany("objects")
                        .HasForeignKey("sysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Weather_site.Core.Entities.Wind", "wind")
                        .WithMany("objects")
                        .HasForeignKey("windId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("all");

                    b.Navigation("coord");

                    b.Navigation("main");

                    b.Navigation("sys");

                    b.Navigation("wind");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Clouds", b =>
                {
                    b.Navigation("objects");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Coord", b =>
                {
                    b.Navigation("objects");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Main", b =>
                {
                    b.Navigation("objects");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Sys", b =>
                {
                    b.Navigation("objects");
                });

            modelBuilder.Entity("Weather_site.Core.Entities.Wind", b =>
                {
                    b.Navigation("objects");
                });
#pragma warning restore 612, 618
        }
    }
}
